#summary Lua scripting

= Introduction =

Grafx2 offers a lot of features, but sometimes you need something really
particular, and it's not there. That's why we added the brush factory, it allows you to generate or modify a brush using a lua script.
It has been expanded to allow changing the image and palette.
So you can extend Grafx2 capabilities with almost no limit!

We are looking forward to your scripts, please send us them so we can share them
in the next version of GrafX2!

= How does it work =

Using the brush factory is quite simple : just right click the 'brush effects' button to open it.
It's a small window allowing you to select the script you want to run.
Once you press the run button, the script is executed and generates something.
If it's a brush, you can paste it like any other brush. If it's a picture, you should see it.
If you create your own scripts and place them in _<program directory>/scripts_ they will appear in the list. Scripts are reloaded from disk when you run them, so you can edit them in a text editor and test them without leaving Grafx2.

= API Reference =

Here is a list of things you get in lua. If you think we should add more, let us know !

== Conventions ==
On this page we use the following conventions :
 * x : horizontal position
 * y : vertical position
 * c : color index
 * w : width
 * h : height
 * r : red
 * g : green
 * b : blue

Note this is just for the examples below. You are free to name your variables the way you want.

== Functions ==
=== Drawing ===
This is as simple as it gets. You can just render some things to the brush or to the current layer.

 * {{{putbrushpixel(x, y, c)}}} set the color of pixel at coords (x, y) in the brush to c.

 * {{{putpicturepixel(x, y, c)}}} set the color of pixel at coords (x, y) in the picture to c.

 * {{{clearpicture(c)}}} clears picture with color c.

Drawing out of bounds has no effect.

=== Reading pixels ===
These allows you to read existing data, for example to filter it, do batch color replacing, or any other distorsion you could come up with.

 * {{{getbrushpixel(x, y)}}} returns the color of pixel at coords (x, y) in the brush.

 * {{{getlayerpixel(x, y)}}} returns the color of pixel at coords (x, y) in the current layer of the picture.

 * {{{getpicturepixel(x, y)}}} returns the color of pixel at coords (x, y) in the picture. If there are several layers visible,this will pick "the color that you see".

 * {{{getbackuppixel(x, y)}}} returns the color of pixel at coords (x, y) in the backup screen, that is, the picture before your script started to run.

 * {{{getbrushbackuppixel(x, y)}}} returns the color of pixel at coords (x, y) in the backup brush, before any of your changes.

Reading out of the brush will return the BackGround color, ie. the one that marks transparent pixels in the brush.

Reading out of the picture will return the Transparent color.

=== Picture infos ===
Note the resize occurs immediately. If you need the original dimensions, to read from the backup, you should query them before the resize and keep them in Lua variables.

 * {{{getbrushsize()}}} returns the brush size (w, h).

 * {{{setbrushsize(w, h)}}} sets the brush size. The new brush is initially filled with transparent pixels.

 * {{{getpicturesize()}}} returns the picture size (w, h).

 * {{{setpicturesize(w, h)}}} sets the picture size. All layers are clipped accordingly.

 * {{{getforecolor()}}} returns the Foreground pen color (0-255).

 * {{{getbackcolor()}}} returns the Background pen color (0-255).

 * {{{gettranscolor()}}} returns the picture's transparent color (0-255) for layers and GIF transparency.


=== Palette ===
You can get infos on the palette for selecting your colors when drawing, or you can create scripts that just build a full palette from 2 or 3 colors.

 * {{{setcolor(c,r,g,b)}}} set color index c in palette to (r,g,b)

 * {{{getcolor(c)}}} returns the (r, g, b) value of color at index c.

 * {{{matchcolor(r,g,b)}}} return the index of the nearest color available in the palette.

 * {{{getbackupcolor(c)}}} returns the (r, g, b) value of color at index c, from the original palette (before any changes done by your script).

All of r,g,b and c are normally in the range 0 to 255. If you provide numbers outside of this range, they will roll over, for example 300 becomes 45 and -2 becomes 254.

=== Spare ===
These allow you to get data from the spare image.

 * {{{getsparepicturesize()}}} returns the spare image's size (w, h).

 * {{{getsparecolor(c)}}} returns the (r, g, b) value of color at index c, from the spare's palette.

 * {{{getsparetranscolor()}}} returns the spare picture's transparent color (0-255) for layers and GIF transparency.

 * {{{getsparelayerpixel(x, y)}}} returns the color of pixel at coords (x, y) in the current layer of the spare picture.

 * {{{getsparepicturepixel(x, y)}}} returns the color of pixel at coords (x, y) in the spare picture. If there are several layers visible, this will pick "the color that you see".

=== Misc functions ===
These are for usability of your script.

 * {{{inputbox(window_title,label_1,initial_value_1,min_1,max_1,digits_1,...)}}} Opens a window that asks the user for one or several setting values. The control only accepts values between the min and max that you provide, and you can specify how many decimal places of precision it should have with {{{digits}}}. You can ask for more than one value by adding arguments: label_2, initial_value_2, min_2, max_2, digits_2 etc, with a limit of 9 settings. This function returns one value to tell if the user accepted or cancelled (true or false), and one additional return value by setting. Example:
{{{
ok, w, h = inputbox("Modify brush size",
  "Width",     w, 1,100,0,
  "Height",    h, 1,100,0
);
}}}
   * If min and max are 0 and 1, and digits is 0, it will show a checkbox. Ex:
{{{
ok, xflip, yflip = inputbox("Transformation",
  "X-Flip",    0, 0, 1,0,
  "Y-Flip",    0, 0, 1,0
);
}}}
   * If min and max are 0 and 1, and digits is negative, it will show a radio button. Radio buttons with the same number of "digits" are grouped together. Ex:
{{{
ok, a, b ,c, d = inputbox("Your choice",
  "A",    1, 0, 1,-1,
  "B",    0, 0, 1,-1,
  "C",    0, 0, 1,-1,
  "D",    0, 0, 1,-1
);
}}}

 * {{{messagebox(message)}}} or {{{messagebox(window_title,message)}}} Displays a multiline message. It performs word-wrapping automatically, but you can also include character \n in message to force some carriage-returns. If you need variables in the message, use Lua's concatenation operator .. (two dots) to assemble the message string.

= Sample script =

Here is a very small sample script that generate a diagonal gradient.

{{{
-- get the size of the brush
w, h = getbrushsize()

-- Iterate over each pixel
for x = 0, w - 1, 1 do
	for y = 0, h - 1, 1 do
		-- Send the color for this pixel
		putbrushpixel(x, y, (x+y)%256);
	end
end
}}}

= Known bugs and limitations =
 * The inputbox is limited. If you have needs that it can't meet, please contact us, we'll see if there is a way to improve it.

= More reading =
Lua is a well known programming language.
Here are some pages from the internet you may want to look at for more information :
 * http://lua-users.org/wiki/MathLibraryTutorial Stuff about math.
 * http://lua-users.org/wiki/LuaDirectory The Lua wiki with a lot of pointers to informations.
 * http://code.google.com/p/grafx2/source/browse/#svn/trunk/scripts The subversion holds a set of scripts you may use as a base for yours. You can send us your scripts if you want them to be added to the list.