#summary Generate a brush with some lines of code !

= Introduction =

Grafx2 offers a lot of features, but sometimes you need something really
particular, and it's not there. That's why we added the brush factory.
It allows you to generate or modify a brush or a picture using a lua script.
So you can extend Grafx2 capabilities with almost no limit!

We are looking forward to your scripts, please send us them so we can share them
in the next version of GrafX2!

= How does it work =

Using the brush factory is quite simple : just right click the 'brush effects' button to open it.
It's a small window allowing you to select the script you want to run.
Once you press the run button, the script is executed and generates something.
If it's a brush, you can paste it like any other brush. If it's a picture, you should see it.

= API Reference =

Here is a list of things you get in lua. If you think we should add more, let us know !

== Functions ==
=== Drawing ===
This is as simple as it gets. You can just render some things to the brush or to the current layer.

 * {{{putbrushpixel(x, y, c)}}} set the color of pixel at coords (x, y) in the brush to c.

 * {{{putpicturepixel(x, y, c)}}} set the color of pixel at coords (x, y) in the picture to c.

=== Reading pixels ===
These allows you to read existing data, for example to filter it, do batch color replacing, or any other distorsion you could come up with.

 * {{{getbrushpixel(x, y)}}} returns the color of pixel at coords (x, y) in the brush.

 * {{{getpicturepixel(x, y)}}} returns the color of pixel at coords (x, y) in the picture.

 * {{{getbackuppixel(x, y)}}} returns the color of pixel at coords (x, y) in the backup screen, that is, the picture before your script started to run.

=== Picture infos ===
Be careful not to write any data out of the picture space ! You may crash GrafX2 doing so...

Note the resize occurs immediately and makes it impossible to read the old data properly without tricks. The backup screen should still be in a readable state.

 * {{{getbrushsize()}}} returns the brush size (w, h).

 * {{{setbrushsize(w, h)}}} sets the brush size.

 * {{{getpicturesize()}}} returns the picture size (w, h).

 * {{{setpicturesize(w, h)}}} sets the picture size.

=== Palette ===
You can get infos on the palette for selecting your colors when drawing, or you can create scripts that just build a full palette from 2 or 3 colors.

 * {{{setcolor(c,r,g,b)}}} set color index c in palette to (r,g,b)

 * {{{getcolor(c)}}} returns the (r, g, b) value of color at index c.

 * {{{matchcolor(r,g,b)}}} return the index of the nearest color available in the palette.


=== Misc functions ===
These are for usability of your script.

 * {{{brushenable()}}} ensures that the brush you generated is selected. Please call this if your script alters the brush in any way.

= Sample script =

Here is a very small sample script that generate a diagonal gradient.

{{{
-- get the size of the brush
w, h = getbrushsize()

-- Iterate over each pixel
for x = 0, w - 1, 1 do
	for y = 0, h - 1, 1 do
		-- Send the color for this pixel
		putbrushpixel(x, y, (x+y)%256);
	end
end
}}}

= Known bugs and limitations =
 * When your script generate a brush, you have to call brushenable to ensure it is displayed. If you don't, the user will not understand what happened as the brush may not be visible.
 * It is not possible to send custom parameters to a script, which makes the feature not so useful. It is not easy to make that simple with a nice GUI. Suggestions welcome. Or we could add a binding so lua scripts can open and draw windows...